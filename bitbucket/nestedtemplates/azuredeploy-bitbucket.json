{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "scriptsBranch": {
            "type": "string",
            "defaultValue": "master",
            "metadata": {
                "description": "A branch in the repository to download scripts from. We want to be able to override it during development."
            }
        },
        "repositoryLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where the source of the template are located"
            },
            "defaultValue": "[concat('https://bitbucket.org/atlassian/atlassian-azure-deployment/raw/', parameters('scriptsBranch'), '/')]"
        },
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located"
            },
            "defaultValue": "[parameters('repositoryLocation')]"
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
            },
            "defaultValue": ""
        },
        "bitbucketVersion": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "The Bitbucket software product version to install. You can also specify 'latest' to download the latest version available. If using with customDownloadUrl you have to specify the correct version."
            }
        },
        "customDownloadUrl": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Use this URL to override standard Atlassian download url eg for EAP, RC versions. NB will be used in conjunction with the bitbucketVersion parameter."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Azure region (WestUS, CentralUs, AustraliaEast, etc) shared by all of the resources in the template"
            }
        },
        "vnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "Address space for the Virtual Network created by the template"
            }
        },
        "publicNetCIDR": {
            "type": "string",
            "defaultValue": "10.0.1.0/24",
            "metadata": {
                "description": "Address space for the public subnet in the vnet"
            }
        },
        "appgwNetCIDR": {
            "type": "string",
            "defaultValue": "10.0.2.0/24",
            "metadata": {
                "description": "Address space for the private subnet with Application Gateways"
            }
        },
        "bbsNetCIDR": {
            "type": "string",
            "defaultValue": "10.0.4.0/24",
            "metadata": {
                "description": "Address space for the private subnet where Bitbucket Server nodes are deployed"
            }
        },
        "esNetCIDR": {
            "type": "string",
            "defaultValue": "10.0.5.0/24",
            "metadata": {
                "description": "Address space for the private subnet where Elasticsearch nodes are deployed"
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for SSH access to Bitbucket Server nodes as well as for the jumpbox"
            }
        },
        "sshKey": {
            "type": "string",
            "metadata": {
                "description": "SSH key to allow access to jumpbox."
            }
        },
        "jumpboxSize": {
            "type": "string",
            "defaultValue": "Standard_B1s",
            "metadata": {
                "description": "The size of jumpbox VM"
            }
        },
        "jumpboxHostname": {
            "type": "string",
            "defaultValue": "jumpbox",
            "metadata": {
                "description": "The hostname for jumpbox. Does not affect it's DNS name"
            }
        },
        "bbsSize": {
            "type": "string",
            "defaultValue": "Standard_DS3_v2",
            "allowedValues": [
                "Standard_DS3_v2",
                "Standard_D8s_v3",
                "Standard_DS4_v2",
                "Standard_E2s_v3",
                "Standard_E4-2s_v3",
                "Standard_E8-4s_v3"
            ],
            "metadata": {
                "description": "The size of Bitbucket Server nodes vm"
            }
        },
        "bbsNodeCount": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The amount of Bitbucket Server nodes to deploy"
            }
        },
        "bbsNodePrefix": {
            "type": "string",
            "defaultValue": "bbsnode",
            "metadata": {
                "description": "Hostname prefix for nodes in Bitbucket Server cluster"
            }
        },
        "bbsDiskSize": {
            "type": "int",
            "defaultValue": 31,
            "metadata": {
                "description": "The size (in GB) of the data disk that is used for logs on a Bitbucket Server node"
            }
        },
        "bbsDiskStorageType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "metadata": {
                "description": "The type of storage account used for logs on a Bitbucket Server node"
            }
        },
        "bbsHttpPort": {
            "type": "string",
            "defaultValue": "7990",
            "metadata": {
                "description": "Internal port that Bitbucket Server uses to accept HTTP connections"
            }
        },
        "bbsHazelcastTag": {
            "type": "string",
            "defaultValue": "HAZELCAST",
            "metadata": {
                "description": "Hazelcast tag for nodes in Bitbucket Server cluster"
            }
        },
        "bbsHazelcastPort": {
            "type": "string",
            "defaultValue": "5701",
            "metadata": {
                "description": "Internal port that Bitbucket Server uses for Hazelcast communication"
            }
        },
        "azureSqlTier": {
            "type": "string",
            "defaultValue": "P2",
            "allowedValues": [
                "Basic",
                "S0",
                "S1",
                "S2",
                "S3",
                "S4",
                "S6",
                "S7",
                "S9",
                "S12",
                "P1",
                "P2",
                "P4",
                "P6",
                "P11",
                "P15"
            ],
            "metadata": {
                "description": "Database Tier for Azure SQL DTU pricing model"
            }
        },
        "azureSqlUsername": {
            "type": "string",
            "metadata": {
                "description": "Username to access Bitbucket Server database."
            }
        },
        "azureSqlPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password to access Bitbucket Server database."
            }
        },
        "nfsVmSize": {
            "type": "string",
            "defaultValue": "Standard_DS3_v2",
            "allowedValues": [
                "Standard_DS3_v2",
                "Standard_D8s_v3",
                "Standard_DS4_v2",
                "Standard_E8-4s_v3",
                "Standard_L4s",
                "Standard_L8s",
                "Standard_L16s",
                "Standard_L32s",
                "Standard_D16_v3",
                "Standard_E16s_v3"
            ],
            "metadata": {
                "description": "The size of the VM that is used for NFS server."
            }
        },
        "nfsDiskSize": {
            "type": "int",
            "defaultValue": 128,
            "allowedValues": [
                128,
                256,
                512,
                1024,
                2048,
                4095
            ],
            "metadata": {
                "description": "The size of the data disk for Git repositories in GB"
            }
        },
        "appGatewaySize": {
            "type": "string",
            "defaultValue": "Medium",
            "allowedValues": [
                "Small",
                "Medium",
                "Large"
            ],
            "metadata": {
                "description": "The size of Application Gateway. Can be small, medium and large."
            }
        },
        "appGatewayProbeInterval": {
            "type": "int",
            "defaultValue": 5,
            "metadata": {
                "description": "The interval in seconds for Application Gateway to very that Bitbucket Server node is available"
            }
        },
        "appGatewayCapacity": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "Amount of Application Gateway instances to created"
            }
        },
        "license": {
            "type": "securestring",
            "defaultValue": "AAABpg0ODAoPeNp1kUtP20AUhff+FVfqLtI4DkkgRLLUYA+UqtiR7SzawmLiXPBQe8aaR9r013ewDYG2LGZzH2fO+e6HorKQyD0ECwhmy/lsOZ3D1U0BJ8Fk4SW22aJK7zcalQ7JxIukMKw0CWswfDSVbJj+yEzNtOZM+KVsPG2YrvwvvEShsTi02M3mxSoraPZv96WztqqsmMaYGQyfPieTCQkW3ntKQ53+ark6dEvr6fT007NDesN4/Y7FHNUe1XUcXtAzSmbxtxNymn4+I1fT88Xg0AmyCIVBFRpl0cvtVpeKt4ZL0VdGo1GSFuQyzcg6S+NNVFynCdnk1DXCSKFztIPtAUyFMHgFKkq5QwWtko9YGvheGdPeLsfjB+m/sTiu+w2C/cadD7EEIQ3suDaKb61Bp8w1GAml1UY27kC+50I7z4KJ8jUYR/N8oNmnc3z4Hl9yRBldFTQmF1+fvP+f2RDBQduIH0L+FF5Ok9A9Mg8CL1UPTHDNOjyr31YhxNjW8tA4hl5Hw3X+Pm2MR6Z0z2rbTcGQHe6lgl5rd9Q6zvX2/wDFKfAUMCsCFH8cSCeQYWgwBdkxpTeUqGiTfg2qAhNxOHcjUrs7UMuuXFQw4T4+mxFqX02k8",
            "metadata": {
                "description": "Bitbucket Data Center 14 days evaluation license."
            }
        },
        "bitbucketAdminUsername": {
            "type": "string",
            "defaultValue": "ssh",
            "metadata": {
                "description": "Username for Bitbucket Server administrator user. By default it's the same as ssh user."
            }
        },
        "bitbucketAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for Bitbucket Server administrator user."
            }
        },
        "bitbucketAdminName": {
            "type": "string",
            "defaultValue": "John Doe",
            "metadata": {
                "description": "Bitbucket Server administorator full name."
            }
        },
        "bitbucketAdminEmail": {
            "type": "string",
            "defaultValue": "admin@example.com",
            "metadata": {
                "description": "Bitbucket Server administrator email."
            }
        },
        "esDataNodeCount": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The number of elasticsearch data nodes to be deployed."
            }
        },
        "esDataDiskSize": {
            "type": "int",
            "defaultValue": 32,
            "metadata": {
                "description": "The size of the data disk for elasticsearch in GB."
            }
        },
        "esNodeSize": {
            "type": "string",
            "defaultValue": "Standard_DS3_v2",
            "allowedValues": [
                "Standard_DS3_v2",
                "Standard_D8s_v3",
                "Standard_DS4_v2",
                "Standard_E2s_v3",
                "Standard_E4-2s_v3",
                "Standard_E8-4s_v3"
            ],
            "metadata": {
                "description": "The size of Elasticsearch nodes VM."
            }
        },
        "jumpboxPrivateIpAddress": {
           "type": "string",
           "metadata": {
                "description": "Jumpbox Private IP Address"
            }
        },
        "nfsPrivateIpAddress": {
           "type": "string",
           "metadata": {
                "description": "NFS Private IP Address"
            }
        },
         "lbFqdn": {
            "type": "string",
            "metadata": {
                 "description": "LB FQDN"
             }
         }
    },
    "variables": {
        "namespace": "bitbucket",
        "suffix": "[uniqueString(resourceGroup().id)]",
        "tags": {
            "vendor": "Atlassian",
            "product": "Bitbucket Server",
            "provider": "2F0AF47A-92C7-413A-9009-C3815BFF7AF6"
        },
        "appGtwyTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azuredeploy-bitbucket-gtwy.json', parameters('_artifactsLocationSasToken')))]",
        "net": {
            "vnet": {
                "name": "[concat(variables('namespace'), '-vnet')]",
                "cidr": "[parameters('vnetCIDR')]"
            },
            "nic": {
                "jumpbox": {
                    "name": "[concat(variables('namespace'), '-jumpbox-nic')]",
                    "ipConfig": {
                        "name": "[concat(variables('namespace'), '-jumpbox-ipconfig')]"
                    }
                },
                "nfs": {
                    "name": "[concat(variables('namespace'), '-nfs-nic')]",
                    "ipConfig": {
                        "name": "[concat(variables('namespace'), '-nfs-ipconfig')]"
                    }
                }
            },
            "nsg": {
                "public": {
                    "name": "[concat(variables('namespace'), '-public-nsg')]"
                },
                "appgw": {
                    "name": "[concat(variables('namespace'), '-appgw-nsg')]"
                },
                "bbs": {
                    "name": "[concat(variables('namespace'), '-bbs-nsg')]"
                },
                "rules": {
                    "denyInbound": {
                        "name": "denyInbound",
                        "properties": {
                            "description": "Deny All",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "direction": "Inbound",
                            "priority": 1001
                        }
                    },
                    "denyOutbound": {
                        "name": "denyOutbound",
                        "properties": {
                            "description": "Deny All",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "direction": "Outbound",
                            "priority": 1002
                        }
                    }
                }
            },
            "subnets": {
                "public": {
                    "name": "[concat(variables('namespace'), '-net-public')]",
                    "cidr": "[parameters('publicNetCIDR')]"
                },
                "appgw": {
                    "name": "[concat(variables('namespace'), '-net-appgw')]",
                    "cidr": "[parameters('appgwNetCIDR')]"
                },
                "bbs": {
                    "name": "[concat(variables('namespace'), '-net-bbs')]",
                    "cidr": "[parameters('bbsNetCIDR')]"
                }
            },
            "appGw": {
                "name": "[concat(variables('namespace'), '-app-gw')]",
                "bend": "[concat(variables('namespace'), '-app-gw', '-bend')]"
            },
            "lb": {
                "name": "[concat(variables('namespace'), '-lb')]",
                "dns": "[concat(variables('namespace'), '-ssh-', variables('suffix'))]",
                "names": {
                    "publicIP": "[concat(variables('namespace'), '-lb', '-public-ip')]",
                    "fendIpConfig": "[concat(variables('namespace'), '-lb', '-fend-ipconfig')]",
                    "bendGit": "[concat(variables('namespace'), '-lb', '-bend-git')]",
                    "bendSsh": "[concat(variables('namespace'), '-lb', '-bend-ssh')]",
                    "bendHttp": "[concat(variables('namespace'), '-lb', '-bend-http')]",
                    "ruleGit": "[concat(variables('namespace'), '-lb', '-rule-git')]",
                    "ruleSsh": "[concat(variables('namespace'), '-lb', '-rule-ssh')]",
                    "ruleHttp": "[concat(variables('namespace'), '-lb', '-rule-http')]"
                }
            }
        },
        "vm": {
            "jumpbox": {
                "name": "[concat(variables('namespace'), 'jumpbox')]",
                "size": "[parameters('jumpboxSize')]",
                "hostname": "[parameters('jumpboxHostname')]",
                "image": {
                    "publisher": "Canonical",
                    "offer": "UbuntuServer",
                    "sku": "16.04.0-LTS"
                }
            },
            "nfs": {
                "name": "[concat(variables('namespace'), '-nfs')]",
                "size": "[parameters('nfsVmSize')]",
                "hostname": "bbsnfs",
                "image": {
                    "publisher": "Canonical",
                    "offer": "UbuntuServer",
                    "sku": "16.04.0-LTS"
                }
            },
            "bbs": {
                "name": "[concat(variables('namespace'), 'bbs-nodes')]",
                "size": "[parameters('bbsSize')]",
                "count": "[parameters('bbsNodeCount')]",
                "hostname": "[parameters('bbsNodePrefix')]",
                "image": {
                    "publisher": "Canonical",
                    "offer": "UbuntuServer",
                    "sku": "16.04.0-LTS"
                },
                "hazelcastTag": {
                    "[parameters('bbsHazelcastTag')]": "[parameters('bbsHazelcastPort')]"
                },
                "storage": {
                    "size": "[parameters('bbsDiskSize')]",
                    "type": "[parameters('bbsDiskStorageType')]",
                    "caching": "None"
                },
                "scripts": [
                    "[concat(uri(parameters('_artifactsLocation'), 'scripts/log.sh'), parameters('_artifactsLocationSasToken'))]",
                    "[concat(uri(parameters('_artifactsLocation'), 'scripts/vm-disk-utils-0.1.sh') , parameters('_artifactsLocationSasToken'))]",
                    "[concat(uri(parameters('_artifactsLocation'), 'scripts/bbs_settings.sh'), parameters('_artifactsLocationSasToken'))]",
                    "[concat(uri(parameters('_artifactsLocation'), 'scripts/nfs_settings.sh'), parameters('_artifactsLocationSasToken'))]",
                    "[concat(uri(parameters('_artifactsLocation'), 'scripts/settings.sh'), parameters('_artifactsLocationSasToken'))]",
                    "[concat(uri(parameters('_artifactsLocation'), 'scripts/install.sh'), parameters('_artifactsLocationSasToken'))]"
                ]
            }
        },
        "elasticsearch": {
            "dataDiskSize": "[parameters('esDataDiskSize')]",
            "dataNodeCount": "[parameters('esDataNodeCount')]",
            "dataVmSize": "[parameters('esNodeSize')]",
            "lbIp": "10.0.5.99",
            "name": "[concat(variables('namespace'), '-elasticsearch')]",
            "templateBaseUrl": "[concat(uri(parameters('_artifactsLocation'), 'elasticsearch/third-party/'), '')]",
            "version": "5.5.1"
        },
        "sql": {
            "server": {
                "name": "[concat(variables('namespace'), '-sql-server-', uniqueString(resourceGroup().id))]",
                "user": "[parameters('azureSqlUsername')]",
                "password": "[parameters('azureSqlPassword')]"
            },
            "database": {
                "name": "[concat(variables('namespace'), '-db')]",
                "edition": "[variables('lookup').sql.tierToEdition[parameters('azureSqlTier')]]"
            },
            "endpoint": {
                "name": "[concat(variables('namespace'), '-endpoint')]"
            }
        },
        "lookup": {
            "sql": {
                "tierToEdition": {
                    "Basic": "Basic",
                    "S0": "Standard",
                    "S1": "Standard",
                    "S2": "Standard",
                    "S3": "Standard",
                    "S4": "Standard",
                    "S6": "Standard",
                    "S7": "Standard",
                    "S9": "Standard",
                    "S12": "Standard",
                    "P1": "Premium",
                    "P2": "Premium",
                    "P4": "Premium",
                    "P6": "Premium",
                    "P11": "Premium",
                    "P15": "Premium"
                }
            }
        },
        "bitbucket": {
            "license": "[parameters('license')]",
            "admin": {
                "username": "[if(equals(parameters('bitbucketAdminUsername'),'ssh'), parameters('adminUsername'), parameters('bitbucketAdminUsername'))]",
                "password": "[parameters('bitbucketAdminPassword')]",
                "fullName": "[parameters('bitbucketAdminName')]",
                "email": "[parameters('bitbucketAdminEmail')]"
            }
        },
        "env": {
            "SQL": [
                "[concat('SQL_USER', '=\"', variables('sql').server.user, '\" ')]",
                "[concat('SQL_PASS', '=\"', variables('sql').server.password, '\" ')]"
            ],
            "BBS": [
                "[concat('BBS_ADMIN', '=\"', variables('bitbucket').admin.username, '\" ')]",
                "[concat('BBS_PASS', '=\"', variables('bitbucket').admin.password, '\" ')]",
                "[concat('BBS_NAME', '=\"', variables('bitbucket').admin.fullName, '\" ')]",
                "[concat('BBS_EMAIL', '=\"', variables('bitbucket').admin.email, '\" ')]",
                "[concat('BBS_LICENSE', '=\"', variables('bitbucket').license, '\" ')]",
                "[concat('BBS_HAZELCAST_PORT', '=\"', parameters('bbsHazelcastPort'), '\" ')]",
                "[concat('BBS_HAZELCAST_CLUSTER_ID', '=\"', parameters('bbsHazelcastTag'), '\" ')]",
                "[concat('BBS_HAZELCAST_GROUP_NAME', '=\"', resourceGroup().name, '\" ')]",
                "[concat('BBS_HAZELCAST_SUBSCRIPTION_ID', '=\"', subscription().subscriptionId, '\" ')]",
                "[concat('BBS_ES_BASE_URL', '=\"http://', variables('elasticsearch').lbIp, ':9200/\" ')]"
            ]
        },
        "data": {
            "SQL": "[replace(replace(replace(replace(string(variables('env').SQL), '[\"', ''), '\"]', ''), '\",\"', ''), '\\\"', '\"')]",
            "BBS": "[replace(replace(replace(replace(string(variables('env').BBS), '[\"', ''), '\"]', ''), '\",\"', ''), '\\\"', '\"')]"
        },
        "reader-role": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
        "gtwyIpName": "[concat(variables('namespace'), '-appgtwyip-', uniqueString(resourceGroup().id))]"
    },
    "resources": [
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2017-05-01",
            "dependsOn": [
                "[variables('vm').bbs.name]"
            ],
            "name": "[guid(resourceGroup().id)]",
            "properties": {
                "roleDefinitionId": "[variables('reader-role')]",
                "principalId": "[reference(concat(resourceId('Microsoft.Compute/virtualMachineScaleSets/', variables('vm').bbs.name),'/providers/Microsoft.ManagedIdentity/Identities/default'),'2015-08-31-PREVIEW').principalId]",
                "scope": "[resourceGroup().id]"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2017-10-01",
            "name": "[variables('gtwyIpName')]",
            "location": "[parameters('location')]",
            "tags": "[variables('tags')]",
            "sku": {
                "name": "Basic"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('gtwyIpName')]"
                },
                "idleTimeoutInMinutes": 30
            }
        },
        {
            "apiVersion": "2018-05-01",
            "name": "appGtwyTemplate",
            "type": "Microsoft.Resources/deployments",
            "dependsOn": [
                "[variables('gtwyIpName')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('appGtwyTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "appGatewayCapacity": {
                        "value": "[parameters('appGatewayCapacity')]"
                    },
                    "appGatewayProbeInterval": {
                        "value": "[parameters('appGatewayProbeInterval')]"
                    },
                    "appGatewaySize": {
                        "value": "[parameters('appGatewaySize')]"
                    },
                    "bbsHttpPort": {
                        "value": "[parameters('bbsHttpPort')]"
                    },
                    "vnetName": {
                        "value": "[variables('net').vnet.name]"
                    }             ,
                    "appGtwySubnetName": {
                        "value": "[variables('net').subnets.appgw.name]"
                    },
                    "gtwyIpName": {
                        "value": "[variables('gtwyIpName')]"
                    }
                }
            }
        },
        {
            "name": "[variables('elasticsearch').name]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('elasticsearch/elasticsearch.json', parameters('_artifactsLocationSasToken')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocationSasToken": {
                      "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "dataNodeCount": {
                        "value": "[variables('elasticsearch').dataNodeCount]"
                    },
                    "dataDiskSize": {
                        "value": "[variables('elasticsearch').dataDiskSize]"
                    },
                    "esTemplateBaseUrl": {
                        "value": "[variables('elasticsearch').templateBaseUrl]"
                    },
                    "jumpboxIp": {
                        "value": "[parameters('jumpboxPrivateIpAddress')]"
                    },
                    "lbIp": {
                        "value": "[variables('elasticsearch').lbIp]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "namespace": {
                        "value": "[variables('elasticsearch').name]"
                    },
                    "netCIDR": {
                        "value": "[parameters('esNetCIDR')]"
                    },
                    "sshKey": {
                        "value": "[parameters('sshKey')]"
                    },
                    "tags": {
                        "value": "[variables('tags')]"
                    },
                    "version": {
                        "value": "[variables('elasticsearch').version]"
                    },
                    "vmSizeDataNodes": {
                        "value": "[variables('elasticsearch').dataVmSize]"
                    },
                    "vnetName": {
                        "value": "[variables('net').vnet.name]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2015-05-01-preview",
            "location": "[parameters('location')]",
            "tags": "[variables('tags')]",
            "name": "[variables('sql').server.name]",
            "properties": {
                "administratorLogin": "[variables('sql').server.user]",
                "administratorLoginPassword": "[variables('sql').server.password]"
            },
            "resources": [
                {
                    "type": "databases",
                    "apiVersion": "2014-04-01",
                    "name": "[variables('sql').database.name]",
                    "location": "[parameters('location')]",
                    "tags": "[variables('tags')]",
                    "dependsOn": [
                        "[variables('sql').server.name]"
                    ],
                    "properties": {
                        "edition": "[variables('sql').database.edition]",
                        "requestedServiceObjectiveName": "[parameters('azureSqlTier')]",
                        "collation": "SQL_Latin1_General_CP1_CS_AS"
                    }
                },
                {
                    "type": "virtualNetworkRules",
                    "apiVersion": "2015-05-01-preview",
                    "name": "[variables('sql').endpoint.name]",
                    "dependsOn": [
                        "[variables('sql').server.name]"
                    ],
                    "properties": {
                        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('net').vnet.name, variables('net').subnets.bbs.name)]",
                        "ignoreMissingVnetServiceEndpoint": false
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2018-06-01",
            "location": "[parameters('location')]",
            "tags": "[variables('tags')]",
            "name": "[variables('vm').nfs.name]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vm').nfs.size]"
                },
                "osProfile": {
                    "computerName": "[variables('vm').nfs.hostname]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('sshKey')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('vm').nfs.image.publisher]",
                        "offer": "[variables('vm').nfs.image.offer]",
                        "sku": "[variables('vm').nfs.image.sku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    },
                    "dataDisks": [
                        {
                            "lun": 0,
                            "diskSizeGB": "[parameters('nfsDiskSize')]",
                            "createOption": "Empty",
                            "caching": "None",
                            "managedDisk": {
                                "storageAccountType": "Premium_LRS"
                            }
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('net').nic.nfs.name)]"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "type": "extensions",
                    "apiVersion": "2018-06-01",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[variables('vm').nfs.name]"
                    ],
                    "name": "script",
                    "properties": {
                        "publisher": "Microsoft.Azure.Extensions",
                        "type": "CustomScript",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "fileUris": "[variables('vm').bbs.scripts]",
                            "commandToExecute": "[concat('BBS_VERSION=\"', parameters('bitbucketVersion'), '\" ', 'BBS_INSTALLER_DOWNLOAD_URL=\"', parameters('customDownloadUrl'), '\" ', ' bash install.sh nfs')]"
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "apiVersion": "2018-06-01",
            "location": "[parameters('location')]",
            "tags": "[union(variables('tags'),variables('vm').bbs.hazelcastTag)]",
            "dependsOn": [
                "[variables('sql').database.name]",
                "[variables('vm').nfs.name]",
                "[variables('elasticsearch').name]"
            ],
            "name": "[variables('vm').bbs.name]",
            "sku": {
                "name": "[variables('vm').bbs.size]",
                "capacity": "[variables('vm').bbs.count]"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "upgradePolicy": {
                    "mode": "Automatic"
                },
                "overprovision": false,
                "virtualMachineProfile": {
                    "osProfile": {
                        "computerNamePrefix": "[variables('vm').bbs.hostname]",
                        "adminUsername": "[parameters('adminUsername')]",
                        "linuxConfiguration": {
                            "disablePasswordAuthentication": true,
                            "ssh": {
                                "publicKeys": [
                                    {
                                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                                        "keyData": "[parameters('sshKey')]"
                                    }
                                ]
                            }
                        }
                    },
                    "storageProfile": {
                        "imageReference": {
                            "publisher": "[variables('vm').bbs.image.publisher]",
                            "offer": "[variables('vm').bbs.image.offer]",
                            "sku": "[variables('vm').bbs.image.sku]",
                            "version": "latest"
                        },
                        "osDisk": {
                            "createOption": "FromImage"
                        },
                        "dataDisks": [
                            {
                                "lun": 0,
                                "diskSizeGB": "[variables('vm').bbs.storage.size]",
                                "createOption": "Empty",
                                "caching": "[variables('vm').bbs.storage.caching]",
                                "managedDisk": {
                                    "storageAccountType": "[variables('vm').bbs.storage.type]"
                                }
                            }
                        ]
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "[concat(variables('namespace'), variables('vm').bbs.hostname, '-nic')]",
                                "properties": {
                                    "primary": true,
                                    "ipConfigurations": [
                                        {
                                            "name": "[concat(variables('namespace'), variables('vm').bbs.hostname, '-ipconfig')]",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('net').vnet.name), '/subnets/', variables('net').subnets.bbs.name)]"
                                                },
                                                "applicationGatewayBackendAddressPools": [
                                                    {
                                                        "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('net').appGw.name), '/backendAddressPools/', variables('net').appGw.bend)]"
                                                    }
                                                ],
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('net').lb.name), '/backendAddressPools/', variables('net').lb.names.bendGit)]"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "enableAcceleratedNetworking": true
                                }
                            }
                        ]
                    }
                }
            },
            "resources": [
                {
                    "name": "[concat(variables('vm').bbs.name, '-extension')]",
                    "type": "extensions",
                    "location": "[parameters('location')]",
                    "apiVersion": "2018-06-01",
                    "dependsOn": [
                        "[variables('vm').bbs.name]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Azure.Extensions",
                        "type": "CustomScript",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "fileUris": "[variables('vm').bbs.scripts]",
                            "commandToExecute": "[concat(variables('data').SQL, variables('data').BBS, ' SQL_HOST=\"', reference(variables('sql').server.name).fullyQualifiedDomainName, '\"', ' NFS_SERVER_IP=\"', parameters('nfsPrivateIpAddress'), '\"', ' BBS_URL=\"', 'http://', reference(variables('gtwyIpName')).dnsSettings.fqdn, '\"', ' BBS_SSH_URL=\"', 'ssh://', parameters('lbFqdn'), ':7999', '\"', ' bash install.sh bbs')]"
                        }
                    }
                }
            ]
        }
    ],
    "outputs": {
        "appGatewayFqdn": {
            "type": "string",
            "value": "[reference(variables('gtwyIpName')).dnsSettings.fqdn]"
        },
        "ssh": {
            "type": "string",
            "value": "[concat('ssh ', parameters('adminUsername'), '@', parameters('lbFqdn'))]"
        },
        "jumpbox": {
            "type": "string",
            "value": "[parameters('lbFqdn')]"
        },
        "nfs": {
            "type": "string",
            "value": "[parameters('nfsPrivateIpAddress')]"
        },
        "cmd": {
            "type": "string",
            "value": "[concat(variables('data').SQL, ' NFS_SERVER_IP=\"', parameters('nfsPrivateIpAddress'), '\"', ' bash install.sh bbs')]"
        }
    }
}